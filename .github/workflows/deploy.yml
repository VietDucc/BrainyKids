name: Deploy Backend to Server

on:
  push:
    branches:
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üõéÔ∏è Checkout repository
        uses: actions/checkout@v3

      - name: üîë Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 1: Snyk Security Scan
      - name: üîç Run Snyk to check for vulnerabilities
        uses: snyk/actions/docker@master
        with:
          image: ${{ secrets.DOCKER_USERNAME }}/my-backend:latest
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      # Step 2: Trivy Security Scan
      - name: üîç Run Trivy to check for vulnerabilities
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          chmod +x ./bin/trivy
          export PATH=$PATH:$PWD/bin
          echo "Trivy version:"
          ./bin/trivy --version
          trivy image ${{ secrets.DOCKER_USERNAME }}/my-backend:latest
        continue-on-error: true

      # Step 3: Arachni Scan with longle2003/arachni:v1.4-0.5.10
      - name: üîç Run Arachni Scan + Export HTML Report
        run: |
          mkdir -p /tmp/arachni-reports
          
          echo "Start Arachni scan..."
          docker run --rm -v /tmp/arachni-reports:/tmp/ longle2003/arachni:v1.4-0.5.10 \
            bin/arachni https://brainy-kids-frontend.vercel.app/ \
            --output-only-positives \
            --report-save-path=/tmp/scan.afr

          echo "Scan done. Generating HTML report..."
          docker run --rm -v /tmp/arachni-reports:/tmp/ longle2003/arachni:v1.4-0.5.10 \
            bin/arachni_reporter /tmp/scan.afr --reporter=html:outfile=/tmp/scan.html.zip

          echo "Set permissions for report file"
          sudo chmod 777 /tmp/arachni-reports/scan.html.zip

          echo "Listing /tmp/arachni-reports contents:"
          ls -l /tmp/arachni-reports

        continue-on-error: true

      - name: Check Arachni report zip file before unzip
        run: |
          echo "Checking report zip file:"
          ls -lh /tmp/arachni-reports/scan.html.zip || echo "File not found!"

      - name: Extract Arachni HTML report
        run: |
          unzip /tmp/arachni-reports/scan.html.zip -d /tmp/arachni-reports/html-report

      - name: Check extracted report contents
        run: |
          echo "Extracted files:"
          ls -l /tmp/arachni-reports/html-report

      - name: Deploy Arachni report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: /tmp/arachni-reports/html-report



        #      # Step 4: SonarCloud Code Quality Analysis
#      - name: üîé SonarCloud Scan (CLI)
#        run: |
#          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
#          unzip sonar-scanner.zip
#          ./sonar-scanner-*/bin/sonar-scanner \
#            -Dsonar.projectKey=VietDucc_BrainyKids \
#            -Dsonar.organization=vietducc \
#            -Dsonar.sources=. \
#            -Dsonar.host.url=https://sonarcloud.io \
#            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
#
#        continue-on-error: true

      - name: üèóÔ∏è Build Docker Image
        run: |
          docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/my-backend:latest .

      - name: üì§ Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-backend:latest

      - name: üöÄ Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 8022
          script: |
            # C√†i docker-compose n·∫øu ch∆∞a c√≥
            which docker-compose || sudo apt-get update && sudo apt-get install -y docker-compose

            # Ch·∫°y docker-compose
            cd ~/BrainyKids
            docker-compose down
            docker-compose pull
            docker-compose up -d

            # Ch·ªù backend kh·ªüi ƒë·ªông 
            sleep 10

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: üîß Run API Tests (JUnit + RestAssured)
        env:
          API_BASE_URL: "https://duc-spring.ngodat0103.live"
          JWT_TOKEN: ${{ secrets.JWT_TOKEN }}
        run: mvn test

